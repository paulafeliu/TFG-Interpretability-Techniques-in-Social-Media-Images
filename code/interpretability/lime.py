"""
lime_explainer.py
-----------------
Provides a class for image explanation using LIME.
"""
import numpy as np
import matplotlib.pyplot as plt
from lime import lime_image
from PIL import Image
import torch
import torchvision.transforms as transforms

class LIMEExplainer:
    def __init__(self, model, device):
        """
        model: A PyTorch model.
        device: torch.device instance.
        """
        self.model = model
        self.device = device
        self.explainer = lime_image.LimeImageExplainer()
        # Define a transformation similar to your training preprocessing.
        self.preprocess = transforms.Compose([
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406],
                                 std=[0.229, 0.224, 0.225])
        ])

    def predict_fn(self, images, target_task=0):
        """
        images: NumPy array of shape (N, H, W, C) with float values in [0,1].
        target_task: Index of the output head to use.
        
        Returns:
            A NumPy array of predictions (probabilities) for each image.
        """
        preds = []
        for img in images:
            pil_img = Image.fromarray((img * 255).astype(np.uint8))
            tensor_img = self.preprocess(pil_img).unsqueeze(0).to(self.device)
            with torch.no_grad():
                outputs = self.model(tensor_img)
                # Select the target output.
                out = outputs[target_task]
                prob = torch.nn.functional.softmax(out, dim=1)
                preds.append(prob.cpu().numpy()[0])
        return np.array(preds)

    def explain(self, image, target_task=0, save_path=None):
        """
        Generates a LIME explanation for the given image.
        
        image: NumPy array (H, W, C) in [0,1].
        target_task: Output head index to explain.
        save_path: If provided, the resulting figure is saved.
        
        Returns:
            explanation: The LIME explanation object.
            temp: The image with an overlaid mask.
            mask: The mask generated by LIME.
        """
        explanation = self.explainer.explain_instance(
            image.astype(np.double),
            classifier_fn=lambda x: self.predict_fn(x, target_task=target_task),
            top_labels=1,
            hide_color=0,
            num_samples=1000
        )
        # Get explanation for the top predicted label.
        temp, mask = explanation.get_image_and_mask(
            explanation.top_labels[0],
            positive_only=True,
            num_features=10,
            hide_rest=False
        )
        # Create a new figure explicitly for the overlay.
        plt.figure()
        plt.imshow(temp)
        plt.axis('off')
        if save_path:
            fig = plt.gcf()
            fig.savefig(save_path, bbox_inches='tight')
            plt.close(fig)
        return explanation, temp, mask
